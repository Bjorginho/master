datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  student   Student?
}

model Student {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  firstName String
  lastName  String
  classes   StudentClass[]
  user      User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?           @unique
}

model Course {
  id          Int      @id @default(autoincrement())
  code        String   @unique @default("")
  name        String   @db.VarChar(255)
  description String   @db.Text
  institute   String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  classes     Class[]
}

model Class {
  id            Int            @id @default(autoincrement())
  year          Int
  semester      SEMESTER
  course        Course         @relation(fields: [courseCode], references: [code], onDelete: Cascade)
  courseCode    String
  students      StudentClass[]
  groups        Group[]
  announcements Announcement[]
  assignments   Assignment[]
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  author    String
  class     Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   Int?
}

model StudentClass {
  id        Int           @id @default(autoincrement())
  student   Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  class     Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   Int
  groups    GroupMember[]
}

model GroupMember {
  id             Int            @id @default(autoincrement())
  studentClass   StudentClass   @relation(fields: [studentId], references: [id])
  studentId      Int
  group          Group          @relation(fields: [groupId], references: [id])
  groupId        Int
  contractSigned GroupContract? @relation(fields: [contractId], references: [id])
  contractId     Int?
}

model Group {
  id                   Int                   @id @default(autoincrement())
  class                Class                 @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId              Int
  students             GroupMember[]
  channels             Channel[]
  deliveredAssignments DeliveredAssignment[]
  contract             GroupContract?
}

model GroupContract {
  id        Int           @id @default(autoincrement())
  group     Group         @relation(fields: [groupId], references: [id])
  groupId   Int           @unique
  title     String?
  content   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  signedBy  GroupMember[]
}

model DeliveredAssignment {
  id           Int        @id @default(autoincrement())
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  deliveredAt  DateTime?  @default(now())
  grade        Float?
  feedback     String?
}

model Assignment {
  id          Int                   @id @default(autoincrement())
  createdAt   DateTime              @default(now())
  dueDate     DateTime
  title       String
  description String
  class       Class                 @relation(fields: [classId], references: [id])
  classId     Int
  delivered   DeliveredAssignment[]
}

model Channel {
  id      Int    @id @default(autoincrement())
  name    String
  url     String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId Int
}

model Event {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime?
  location  String
  createdAt DateTime  @default(now())
}

enum Role {
  STUDENT
  ADMIN
}

enum SEMESTER {
  FALL
  SPRING
}
